/*
 * SwitchboardView.java
 *
 * Created on March 15 2014, 12:09:19 PM
 */
package com.harkon.jdocs.ui.views;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Set;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

import com.harkon.jdocs.JDocsConstants;
//import com.harkon.jdocs.bo.ui.BackOfficeWindow;
import com.harkon.jdocs.main.Application;
//import com.harkon.jdocs.model.ActionHistory;
//import com.harkon.jdocs.model.AttendenceHistory;
//import com.harkon.jdocs.model.Ticket;
import com.harkon.jdocs.model.User;
import com.harkon.jdocs.model.UserPermission;
import com.harkon.jdocs.model.UserType;

import com.harkon.jdocs.ui.dialog.JDocsMessageDialog;


/**
 *
 * @author  HaRRiSK
 */
public class SwitchboardView extends JPanel implements ActionListener {

    public final static String VIEW_NAME = com.harkon.jdocs.JDocsConstants.SWITCHBOARD;
    private Timer ticketListUpdater;

    /** Creates new form SwitchboardView */
    public SwitchboardView() {
        initComponents();

//        btnBackOffice.addActionListener(this);
//        btnClockOut.addActionListener(this);
//        btnEditTicket.addActionListener(this);
//        btnGroupSettle.addActionListener(this);
//        btnInfo.addActionListener(this);
//        btnLogout.addActionListener(this);
//        btnManager.addActionListener(this);
//        btnNewTicket.addActionListener(this);
//        btnPayout.addActionListener(this);
//        btnPrintTicket.addActionListener(this);
//        btnReopenTicket.addActionListener(this);
//        btnSettleTicket.addActionListener(this);
//        btnShutdown.addActionListener(this);
//        btnSplitTicket.addActionListener(this);
//        btnTakeout.addActionListener(this);
//        btnVoidTicket.addActionListener(this);

        ticketListUpdater = new Timer(30 * 1000, new TicketListUpdaterTask());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel statusPanel = new javax.swing.JPanel();
        lblUserName = new javax.swing.JLabel();
        javax.swing.JPanel bottomPanel = new javax.swing.JPanel();
        javax.swing.JPanel bottomLeftPanel = new javax.swing.JPanel();
        javax.swing.JPanel activityPanel = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        javax.swing.JPanel bottomRightPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CURRENT USER STATUS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        statusPanel.setPreferredSize(new java.awt.Dimension(100, 80));
        statusPanel.setLayout(new java.awt.BorderLayout());

        lblUserName.setFont(new java.awt.Font("Tahoma", 1, 18));
        lblUserName.setForeground(new java.awt.Color(0, 102, 102));
        lblUserName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUserName.setText("USER NAME");
        statusPanel.add(lblUserName, java.awt.BorderLayout.PAGE_START);

        add(statusPanel, java.awt.BorderLayout.NORTH);

        bottomPanel.setLayout(new java.awt.BorderLayout());

        bottomLeftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OPEN TICKETS AND ACTIVITY", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        bottomLeftPanel.setLayout(new java.awt.BorderLayout(5, 5));

        activityPanel.setPreferredSize(new java.awt.Dimension(655, 160));
        activityPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton3.setText("OPEN");
        activityPanel.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, 50));

        jButton4.setText("OPEN IN CONTAINING FOLDER");
        activityPanel.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, 150, 50));

        jButton5.setText("SEND BY E-MAIL");
        activityPanel.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 200, 50));

        jButton6.setText("ADD TAGS");
        activityPanel.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, 150, 50));

        jButton7.setText("jButton7");
        activityPanel.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 190, 50));

        bottomLeftPanel.add(activityPanel, java.awt.BorderLayout.SOUTH);

        bottomPanel.add(bottomLeftPanel, java.awt.BorderLayout.CENTER);

        bottomRightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OTHERS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        bottomRightPanel.setPreferredSize(new java.awt.Dimension(200, 10));

        jButton1.setText("CLIENTS");

        jButton2.setText("jButton2");

        org.jdesktop.layout.GroupLayout bottomRightPanelLayout = new org.jdesktop.layout.GroupLayout(bottomRightPanel);
        bottomRightPanel.setLayout(bottomRightPanelLayout);
        bottomRightPanelLayout.setHorizontalGroup(
            bottomRightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(bottomRightPanelLayout.createSequentialGroup()
                .add(48, 48, 48)
                .add(bottomRightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jButton2)
                    .add(jButton1))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        bottomRightPanelLayout.setVerticalGroup(
            bottomRightPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(bottomRightPanelLayout.createSequentialGroup()
                .add(jButton1)
                .add(29, 29, 29)
                .add(jButton2)
                .addContainerGap(282, Short.MAX_VALUE))
        );

        bottomPanel.add(bottomRightPanel, java.awt.BorderLayout.EAST);

        add(bottomPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void doReopenTicket() {
//        NumberSelectionDialog2 dialog = new NumberSelectionDialog2();
//        dialog.setTitle(POSConstants.ENTER_TICKET_ID);
//        dialog.pack();
//        dialog.open();
//
//        if (dialog.isCanceled()) {
//            return;
//        }
//
//        int ticketId = (int) dialog.getValue();
//        TicketDAO dao = new TicketDAO();
//        Ticket ticket = dao.get(Integer.valueOf(ticketId));
//        if (ticket == null) {
//            POSMessageDialog.showError(POSConstants.NO_TICKET_WITH_ID + " " + ticketId + " " + POSConstants.FOUND);
//            return;
//        }
//        if (!ticket.isClosed()) {
//            POSMessageDialog.showError(POSConstants.TICKET_IS_NOT_CLOSED);
//            return;
//        }
//
//        String amount = Application.getCurrencySymbol() + Application.formatNumber(ticket.getTotalAmount());
//        String amountMessage = "<span style='color: red; font-weight: bold;'>" + amount + "</span>";
//        String message = "<html><body><h3>The ticket will be opened in edit mode. Before that, you must refund <br/>" + "amount " + amountMessage + " to keep the system stable. Do you wish to continue?</h3></body></html>";
//        int option = JOptionPane.showOptionDialog(this, message, "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
//        if (option != JOptionPane.YES_OPTION) {
//            return;
//        }
//
//        try {
//            PosTransactionService service = PosTransactionService.getInstance();
//            service.refundTicket(ticket);
//
//            //REOPEN ACTION
//            ActionHistoryDAO.getInstance().saveHistory(Application.getCurrentUser(), ActionHistory.REOPEN_CHECK, "CHK#" + ":" + ticket.getId());
//
//            JOptionPane.showMessageDialog(this, "<html><body>Please press <b>OK</b> after you refund amount " + amountMessage + "</body></html>");
//            ticket.setDrawerResetted(false);
//            editTicket(ticket);
//        } catch (Exception e) {
//            POSMessageDialog.showError(this, POSConstants.ERROR_MESSAGE, e);
//        }
    }

    private void doClockOut() {
//        int option = JOptionPane.showOptionDialog(this, POSConstants.CONFIRM_CLOCK_OUT, POSConstants.CONFIRM, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
//        if (option != JOptionPane.YES_OPTION) {
//            return;
//        }
//
//        User user = Application.getCurrentUser();
//        AttendenceHistoryDAO attendenceHistoryDAO = new AttendenceHistoryDAO();
//        AttendenceHistory attendenceHistory = attendenceHistoryDAO.findHistoryByClockedInTime(user);
//        if (attendenceHistory == null) {
//            attendenceHistory = new AttendenceHistory();
//            Date lastClockInTime = user.getLastClockInTime();
//            Calendar c = Calendar.getInstance();
//            c.setTime(lastClockInTime);
//            attendenceHistory.setClockInTime(lastClockInTime);
//            attendenceHistory.setClockInHour(Short.valueOf((short) c.get(Calendar.HOUR)));
//            attendenceHistory.setUser(user);
//            attendenceHistory.setTerminal(Application.getInstance().getTerminal());
//            attendenceHistory.setShift(user.getCurrentShift());
//        }
//
//        Shift shift = user.getCurrentShift();
//        Calendar calendar = Calendar.getInstance();
//
//        user.doClockOut(attendenceHistory, shift, calendar);
//
//        Application.getInstance().logout();
    }

    private synchronized void doShowBackoffice() {
//        BackOfficeWindow window = Application.getInstance().getBackOfficeWindow();
//        if (window == null) {
//            window = new BackOfficeWindow();
//            Application.getInstance().setBackOfficeWindow(window);
//        }
//        window.setVisible(true);
//        window.toFront();
    }

    private void doShutdown() {
        Application.getInstance().shutdownJDocs();
    }

    private void doLogout() {
        Application.getInstance().logout();
    }

    private void doSettleTicket() {
//        try {
//            List<Ticket> selectedTickets = openTicketList.getSelectedTickets();
//            if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
//                POSMessageDialog.showMessage(POSConstants.SELECT_ONE_TICKET_TO_SETTLE);
//                return;
//            }
//
//            Ticket ticket = selectedTickets.get(0);
//
//            PaymentTypeSelectionDialog dialog = new PaymentTypeSelectionDialog();
//            dialog.setSize(250, 400);
//            dialog.open();
//
//            if (!dialog.isCanceled()) {
//                ticket = TicketDAO.getInstance().initializeTicket(ticket);
//
//                SettleTicketView view = SettleTicketView.getInstance();
//                view.setPaymentView(dialog.getSelectedPaymentView());
//                view.setCurrentTicket(ticket);
//                RootView.getInstance().showView(SettleTicketView.VIEW_NAME);
//            }
//        } catch (Exception e) {
//            POSMessageDialog.showError(POSConstants.ERROR_MESSAGE, e);
//        }
    }

    private void doPrintTicket() {
//        List<Ticket> selectedTickets = openTicketList.getSelectedTickets();
//        if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
//            POSMessageDialog.showMessage(POSConstants.SELECT_ONE_TICKET_TO_PRINT);
//            return;
//        }
//
//        Ticket ticket = selectedTickets.get(0);
//        try {
//            ticket = TicketDAO.getInstance().initializeTicket(ticket);
//            PosPrintService.printTicket(ticket);
//
//            //			PRINT ACTION
//            String actionMessage = "CHK#" + ":" + ticket.getId();
//            ActionHistoryDAO.getInstance().saveHistory(Application.getCurrentUser(), ActionHistory.PRINT_CHECK, actionMessage);
//        } catch (Exception e) {
//            POSMessageDialog.showError(this, e.getMessage(), e);
//        }
    }

    private void doVoidTicket() {
//        try {
//            List<Ticket> selectedTickets = openTicketList.getSelectedTickets();
//            if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
//                POSMessageDialog.showMessage(POSConstants.SELECT_ONE_TICKET_TO_VOID);
//                return;
//            }
//
//            Ticket ticket = selectedTickets.get(0);
//
//            if (!ticket.getTotalAmount().equals(ticket.getDueAmount())) {
//                POSMessageDialog.showMessage(POSConstants.PARTIAL_PAID_VOID_ERROR);
//                return;
//            }
//
//            //initialize the ticket.
//            ticket = TicketDAO.getInstance().initializeTicket(ticket);
//
//            VoidTicketDialog voidTicketDialog = new VoidTicketDialog(Application.getPosWindow(), true);
//            voidTicketDialog.setTicket(ticket);
//            voidTicketDialog.open();
//
//            if (!voidTicketDialog.isCanceled()) {
//                updateView();
//            }
//        } catch (Exception e) {
//            POSMessageDialog.showError(POSConstants.ERROR_MESSAGE, e);
//        }
    }

    private void doSplitTicket() {
//        try {
//            List<Ticket> selectedTickets = openTicketList.getSelectedTickets();
//            if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
//                POSMessageDialog.showMessage(POSConstants.SELECT_ONE_TICKET_TO_SPLIT);
//                return;
//            }
//
//            Ticket ticket = selectedTickets.get(0);
//            if (!ticket.getTotalAmount().equals(ticket.getDueAmount())) {
//                POSMessageDialog.showMessage(POSConstants.PARTIAL_PAID_VOID_ERROR);
//                return;
//            }
//
//            //initialize the ticket.
//            ticket = TicketDAO.getInstance().initializeTicket(ticket);
//
//            SplitTicketDialog dialog = new SplitTicketDialog();
//            dialog.setTicket(ticket);
//            dialog.open();
//
//            updateView();
//        } catch (Exception e) {
//            POSMessageDialog.showError(POSConstants.ERROR_MESSAGE, e);
//        }
    }

    private void doEditTicket() {
//        List<Ticket> selectedTickets = openTicketList.getSelectedTickets();
//        if (selectedTickets.size() == 0 || selectedTickets.size() > 1) {
//            POSMessageDialog.showMessage(POSConstants.SELECT_ONE_TICKET_TO_EDIT);
//            return;
//        }
//
//        Ticket ticket = selectedTickets.get(0);
//
//        editTicket(ticket);
    }

//    private void editTicket(Ticket ticket) {
//        //initialize the ticket.
//        ticket = TicketDAO.getInstance().initializeTicket(ticket);
//
//        OrderView.getInstance().setCurrentTicket(ticket);
//        RootView.getInstance().showView(OrderView.VIEW_NAME);
//    }
    private void doCreateNewTicket() {
        createNewTicket();
    }

    private void createNewTicket() {
//        NumberSelectionDialog2 dialog = new NumberSelectionDialog2();
//        dialog.setTitle(POSConstants.ENTER_A_TABLE_NUMBER);
//        dialog.pack();
//        dialog.open();
//
//        if (dialog.isCanceled()) {
//            return;
//        }
//
//        int tableNumber = (int) dialog.getValue();
//        if (tableNumber == 0) {
//            POSMessageDialog.showError(this, POSConstants.TABLE_NUMBER_CANNOT_BE_0);
//            return;
//        }
//
//        TicketDAO dao = TicketDAO.getInstance();
//
//        Ticket ticket = dao.findTicketByTableNumber(tableNumber);
//        if (ticket != null) {
//            int option = JOptionPane.showOptionDialog(this, POSConstants.THE_TABLE_IS_ALREADY_OCCUPIED_WHAT_DO_YOU_WANT_TO_DO, POSConstants.CONFIRM, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]{"Create New Ticket", "Edit Existing Ticket", "Cancel"}, null);
//            if (option == JOptionPane.YES_OPTION) {
//                //createNewTicket();
//                //return;
//                //fall down to create new ticket.
//            } else if (option == JOptionPane.NO_OPTION) {
//                editTicket(ticket);
//                return;
//            } else {
//                return;
//            }
//        }
//
//        dialog.setTitle(POSConstants.ENTER_NUMBER_OF_GUEST);
//        dialog.setValue(0);
//        dialog.open();
//
//        if (dialog.isCanceled()) {
//            return;
//        }
//        int numberOfGuests = (int) dialog.getValue();
//        if (numberOfGuests == 0) {
//            POSMessageDialog.showError(this, POSConstants.GUEST_NUMBER_CANNOT_BE_0);
//            return;
//        }
//
//        Application application = Application.getInstance();
//
//        ticket = new Ticket();
//        ticket.setTableNumber(tableNumber);
//        ticket.setNumberOfGuests(numberOfGuests);
//        ticket.setTerminal(application.getTerminal());
//        ticket.setOwner(Application.getCurrentUser());
//        ticket.setShift(application.getCurrentShift());
//
//        Calendar currentTime = Calendar.getInstance();
//        ticket.setCreateDate(currentTime.getTime());
//        ticket.setCreationHour(currentTime.get(Calendar.HOUR_OF_DAY));
//
//        OrderView.getInstance().setCurrentTicket(ticket);
//        RootView.getInstance().showView(OrderView.VIEW_NAME);
    }

    private void doTakeout() {
//        Application application = Application.getInstance();
//
//        Ticket ticket = new Ticket();
//        ticket.setTableNumber(Ticket.TAKE_OUT);
//        ticket.setTerminal(application.getTerminal());
//        ticket.setOwner(Application.getCurrentUser());
//        ticket.setShift(application.getCurrentShift());
//
//        Calendar currentTime = Calendar.getInstance();
//        ticket.setCreateDate(currentTime.getTime());
//        ticket.setCreationHour(currentTime.get(Calendar.HOUR_OF_DAY));
//
//        OrderView.getInstance().setCurrentTicket(ticket);
//        RootView.getInstance().showView(OrderView.VIEW_NAME);
    }

    private void doPayout() {
//        PayoutDialog dialog = new PayoutDialog(Application.getPosWindow(), true);
//        dialog.open();
    }

    private void doShowManagerWindow() {
//        ManagerDialog dialog = new ManagerDialog();
//        dialog.open();
    }

    private void doShowTicketInfo() {
//        Ticket ticket = openTicketList.getSelectedTicket();
//        if (ticket == null) {
//            POSMessageDialog.showMessage(POSConstants.SELECT_A_TICKET_FROM_THE_OPEN_TICKET_LIST);
//            return;
//        }
//        TicketDetailDialog dialog = new TicketDetailDialog(Application.getPosWindow(), true);
//        dialog.setButtonPanelVisible(false);
//        dialog.setBalanceDuePanelVisible(false);
//        dialog.setTicket(ticket);
//        dialog.pack();
//        dialog.open();
    }

    private void doGroupSettle() {
//        List<Ticket> selectedTickets = openTicketList.getSelectedTickets();
//        if (selectedTickets.size() < 2) {
//            POSMessageDialog.showError(POSConstants.YOU_MUST_SELECT_TWO_OR_MORE_TICKET_FOR_GROUP_SETTLE);
//            return;
//        }
//
//        PaymentTypeSelectionDialog dialog = new PaymentTypeSelectionDialog();
//        dialog.setSize(250, 400);
//        dialog.open();
//
//        if (!dialog.isCanceled()) {
//
//            for (int i = 0; i < selectedTickets.size(); i++) {
//                Ticket ticket = selectedTickets.get(i);
//                ticket = TicketDAO.getInstance().initializeTicket(ticket);
//                selectedTickets.set(i, ticket);
//            }
//
//            SettleTicketView view = SettleTicketView.getInstance();
//            view.setPaymentView(dialog.getSelectedPaymentView());
//            view.setTicketsToSettle(selectedTickets);
//            RootView.getInstance().showView(SettleTicketView.VIEW_NAME);
//        }
    }

    public void updateView() {
//        User user = Application.getCurrentUser();
//        UserType userType = user.getNewUserType();
//        if (userType != null) {
//            Set<UserPermission> permissions = userType.getPermissions();
//            if (permissions != null) {
//                btnNewTicket.setEnabled(false);
//                btnBackOffice.setEnabled(false);
//                btnEditTicket.setEnabled(false);
//                btnGroupSettle.setEnabled(false);
//                btnManager.setEnabled(false);
//                btnPayout.setEnabled(false);
//                btnReopenTicket.setEnabled(false);
//                btnSettleTicket.setEnabled(false);
//                btnSplitTicket.setEnabled(false);
//                btnTakeout.setEnabled(false);
//                btnVoidTicket.setEnabled(false);
//
//                for (UserPermission permission : permissions) {
//                    if (permission.equals(UserPermission.VOID_TICKET)) {
//                        btnVoidTicket.setEnabled(true);
//                    } else if (permission.equals(UserPermission.PAY_OUT)) {
//                        btnPayout.setEnabled(true);
//                    } else if (permission.equals(UserPermission.SETTLE_TICKET)) {
//                        btnSettleTicket.setEnabled(true);
//                        btnGroupSettle.setEnabled(true);
//                    } else if (permission.equals(UserPermission.REOPEN_TICKET)) {
//                        btnReopenTicket.setEnabled(true);
//                    } else if (permission.equals(UserPermission.PERFORM_MANAGER_TASK)) {
//                        btnManager.setEnabled(true);
//                    } else if (permission.equals(UserPermission.SPLIT_TICKET)) {
//                        btnSplitTicket.setEnabled(true);
//                    } else if (permission.equals(UserPermission.TAKE_OUT)) {
//                        btnTakeout.setEnabled(true);
//                    } else if (permission.equals(UserPermission.VIEW_BACK_OFFICE)) {
//                        btnBackOffice.setEnabled(true);
//                    } else if (permission.equals(UserPermission.PAY_OUT)) {
//                        btnPayout.setEnabled(true);
//                    } else if (permission.equals(UserPermission.EDIT_TICKET)) {
//                        btnEditTicket.setEnabled(true);
//                    } else if (permission.equals(UserPermission.CREATE_NEW_TICKET)) {
//                        btnNewTicket.setEnabled(true);
//                    }
//                }
//            }
//        }
//
//        updateTicketList();
    }

    private void updateTicketList() {
//        User user = Application.getCurrentUser();
//
//        TicketDAO dao = TicketDAO.getInstance();
//        List<Ticket> openTickets = null;
//
//        boolean showAllOpenTicket = false;
//        if (user.getNewUserType() != null) {
//            Set<UserPermission> permissions = user.getNewUserType().getPermissions();
//            if (permissions != null) {
//                for (UserPermission permission : permissions) {
//                    if (permission.equals(UserPermission.VIEW_ALL_OPEN_TICKET)) {
//                        showAllOpenTicket = true;
//                        break;
//                    }
//                }
//            }
//        }
//        if (showAllOpenTicket) {
//            openTickets = dao.findOpenTickets();
//        } else {
//            openTickets = dao.findOpenTicketsForUser(user);
//        }
//        openTicketList.setTickets(openTickets);
//
//        lblUserName.setText(POSConstants.WELCOME + " " + user.toString() + ". " + POSConstants.YOU + " " + POSConstants.HAVE + " " + openTickets.size() + " " + POSConstants.OPEN.toLowerCase() + " " + POSConstants.TICKETS);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel lblUserName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setVisible(boolean aFlag) {
        super.setVisible(aFlag);

        if (aFlag) {
            updateView();
            ticketListUpdater.start();
        } else {
            ticketListUpdater.stop();
        }
    }

    public void actionPerformed(ActionEvent e) {
//        Object source = e.getSource();
//        if (source == btnBackOffice) {
//            doShowBackoffice();
//        }
//        if (source == btnClockOut) {
//            doClockOut();
//        }
//        if (source == btnEditTicket) {
//            doEditTicket();
//        }
//        if (source == btnGroupSettle) {
//            doGroupSettle();
//        }
//        if (source == btnInfo) {
//            doShowTicketInfo();
//        }
//        if (source == btnLogout) {
//            doLogout();
//        }
//        if (source == btnManager) {
//            doShowManagerWindow();
//        }
//        if (source == btnNewTicket) {
//            doCreateNewTicket();
//        }
//        if (source == btnPayout) {
//            doPayout();
//        }
//        if (source == btnPrintTicket) {
//            doPrintTicket();
//        }
//        if (source == btnReopenTicket) {
//            doReopenTicket();
//        }
//        if (source == btnSettleTicket) {
//            doSettleTicket();
//        }
//        if (source == btnShutdown) {
//            doShutdown();
//        }
//        if (source == btnSplitTicket) {
//            doSplitTicket();
//        }
//        if (source == btnTakeout) {
//            doTakeout();
//        }
//        if (source == btnVoidTicket) {
//            doVoidTicket();
//        }
    }

    private class TicketListUpdaterTask implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            updateTicketList();
        }
    }
}
