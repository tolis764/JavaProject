/*
 * PasswordScreen.java
 *
 * Created on March 15 2014, 11:06:15 PM
 */
package com.harkon.jdocs.ui.views;

import java.awt.event.ActionEvent;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;

import com.harkon.jdocs.config.ui.DatabaseConfigurationDialog;
import com.harkon.jdocs.main.Application;
import com.harkon.jdocs.model.AttendenceHistory;
//import com.harkon.jdocs.model.Shift;
import com.harkon.jdocs.model.User;
import com.harkon.jdocs.model.UserType;
import com.harkon.jdocs.model.dao.AttendenceHistoryDAO;
import com.harkon.jdocs.model.dao.UserDAO;
import com.harkon.jdocs.model.dao.UserTypeDAO;
import com.harkon.jdocs.swing.MessageDialog;
import com.harkon.jdocs.ui.dialog.JDocsMessageDialog;
//import com.harkon.jdocs.util.ShiftUtil;

/**
 *
 * @author  HaRRiSK
 */
public class PasswordScreen extends JPanel {

    private static PasswordScreen instance;

    /** Creates new form PasswordScreen */
    private PasswordScreen() {
        initComponents();

        //cbUserType.setModel(new DefaultComboBoxModel(new String[] {User.USER_TYPE_MANAGER, User.USER_TYPE_CASHIER, User.USER_TYPE_SERVER}));

        btnConfigureDatabase.setAction(goAction);
        btnConfigureDatabase.setActionCommand("DBCONFIG");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfPassword = new javax.swing.JPasswordField();
        tfUserId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cbUserType = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnConfigureDatabase = new com.harkon.jdocs.swing.JDocsButton();
        btnLogin = new com.harkon.jdocs.swing.JDocsButton();
        btnShutdown = new com.harkon.jdocs.swing.JDocsButton();

        setMinimumSize(new java.awt.Dimension(293, 293));
        setPreferredSize(new java.awt.Dimension(315, 400));
        setLayout(new java.awt.GridBagLayout());

        jPanel2.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel1.setForeground(new java.awt.Color(204, 102, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ENTER YOUR USER ID");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel2.setForeground(new java.awt.Color(204, 102, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ENTER YOUR PASSWORD");

        tfPassword.setFont(new java.awt.Font("Courier", 1, 18));
        tfPassword.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        tfUserId.setFont(new java.awt.Font("Tahoma", 1, 18));

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        jLabel4.setForeground(new java.awt.Color(204, 102, 0));
        jLabel4.setText("User Type:");

        cbUserType.setFont(new java.awt.Font("DejaVu Sans", 1, 14));

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, tfPassword, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
            .add(tfUserId, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jLabel4)
                .add(18, 18, 18)
                .add(cbUserType, 0, 167, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tfUserId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(tfPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(cbUserType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(4, 4, 4))
        );

        jPanel2Layout.linkSize(new java.awt.Component[] {cbUserType, jLabel4}, org.jdesktop.layout.GroupLayout.VERTICAL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(jPanel2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setPreferredSize(new java.awt.Dimension(315, 400));

        btnConfigureDatabase.setAction(goAction);
        btnConfigureDatabase.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnConfigureDatabase.setText("CONFIGURE DATABASE");
        btnConfigureDatabase.setActionCommand("goAction");
        btnConfigureDatabase.setMaximumSize(new java.awt.Dimension(140, 140));

        btnLogin.setAction(goAction);
        btnLogin.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnLogin.setText("LOGIN");
        btnLogin.setMaximumSize(new java.awt.Dimension(140, 140));

        btnShutdown.setAction(goAction);
        btnShutdown.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnShutdown.setText("SHUTDOWN");
        btnShutdown.setMaximumSize(new java.awt.Dimension(140, 140));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(27, 27, 27)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btnLogin, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btnShutdown, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btnConfigureDatabase, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                .add(28, 28, 28))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(250, Short.MAX_VALUE)
                .add(btnLogin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnShutdown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(btnConfigureDatabase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    public void doLogin() {
        Application application = Application.getInstance();

        int userId = Integer.MAX_VALUE;
        try {
            userId = Integer.parseInt(tfUserId.getText());

        } catch (Exception x) {
            MessageDialog.showError(com.harkon.jdocs.JDocsConstants.USER_ID_NOT_VALID);
            System.out.println("parse uid ex: " + x.toString());
            return;
        }
        char[] password = tfPassword.getPassword();
        String newPass = new String(password);

        UserType selectedUserType = (UserType) cbUserType.getSelectedItem();

        UserDAO dao = new UserDAO();
        Calendar currentTime = Calendar.getInstance();

        try {

            User user = null;

            user = dao.findUser(userId, selectedUserType);
            System.out.println("User: " + userId + " Type: " + selectedUserType);
            if (user == null) {
                MessageDialog.showError("User is null :" + com.harkon.jdocs.JDocsConstants.USER_NOT_FOUND);
                return;
            }

            if (user.getNewUserType() != null) {
                if (user == null) {
                    MessageDialog.showError("UT user:" + com.harkon.jdocs.JDocsConstants.USER_NOT_FOUND);
                    return;
                }

                if (user.getPassword() == null) {
                    MessageDialog.showError("Null Pwd:" + com.harkon.jdocs.JDocsConstants.EMPTY_PASSWORD);
                    return;
                }
                if (!user.getPassword().equalsIgnoreCase(newPass)) {
                    MessageDialog.showError(com.harkon.jdocs.JDocsConstants.WRONG_PASSWORD);
                    return;
                }
            } else {
                user = dao.findUser(userId);
                if (user == null) {
                    MessageDialog.showError("Null User:" + com.harkon.jdocs.JDocsConstants.USER_NOT_FOUND);
                    return;
                }

                if (user.getPassword() == null) {
                    MessageDialog.showError(com.harkon.jdocs.JDocsConstants.EMPTY_PASSWORD);
                    return;
                }
                if (!user.getPassword().equalsIgnoreCase(newPass)) {
                    MessageDialog.showError(com.harkon.jdocs.JDocsConstants.WRONG_PASSWORD);
                    return;
                }

            }

//            Shift currentShift = ShiftUtil.getCurrentShift();
//            if (currentShift == null) {
//                POSMessageDialog.showError(this, "Null Shift:" + com.harkon.jdocs.JDocsConstants.NO_SHIFT_CONFIGURED);
//                return;
//            }

            if (user.isClockedIn() != null && user.isClockedIn().booleanValue()) {
//                Shift userShift = user.getCurrentShift();
                Date userLastClockInTime = user.getLastClockInTime();
                long elaspedTimeSinceLastLogin = Math.abs(currentTime.getTimeInMillis() - userLastClockInTime.getTime());

//                if (userShift != null) {
//                    if (!userShift.equals(currentShift)) {
//                        reClockInUser(currentTime, user, currentShift);
//                    } else if (userShift.getShiftLength() != null && (elaspedTimeSinceLastLogin >= userShift.getShiftLength())) {
//                        reClockInUser(currentTime, user, currentShift);
//                    }
//                } else {
//                    user.doClockIn(application.getTerminal(), currentShift, currentTime);
//                }
//            } else {
//                user.doClockIn(application.getTerminal(), currentShift, currentTime);
            }

            application.setCurrentUser(user);
//            application.setCurrentShift(currentShift);

            tfUserId.setText("");
            tfPassword.setText("");
            application.getRootView().showView(SwitchboardView.VIEW_NAME);
        } catch (Exception e1) {
            MessageDialog.showError("Exception :" + e1);
            System.out.println(e1.toString());
        }
    }

    private void reClockInUser(Calendar currentTime, User user) {
        JDocsMessageDialog.showMessage("You will be clocked out from previous Session");

        Application application = Application.getInstance();
        AttendenceHistoryDAO attendenceHistoryDAO = new AttendenceHistoryDAO();

        AttendenceHistory attendenceHistory = attendenceHistoryDAO.findHistoryByClockedInTime(user);
        if (attendenceHistory == null) {
            attendenceHistory = new AttendenceHistory();
            Date lastClockInTime = user.getLastClockInTime();
            Calendar c = Calendar.getInstance();
            c.setTime(lastClockInTime);
            attendenceHistory.setClockInTime(lastClockInTime);
            attendenceHistory.setClockInHour(Short.valueOf((short) c.get(Calendar.HOUR)));
            attendenceHistory.setUser(user);
//            attendenceHistory.setTerminal(application.getTerminal());
//            attendenceHistory.setShift(user.getCurrentShift());
        }

//        user.doClockOut(attendenceHistory, currentShift, currentTime);

//        user.doClockIn(application.getTerminal(), currentShift, currentTime);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.harkon.jdocs.swing.JDocsButton btnConfigureDatabase;
    private com.harkon.jdocs.swing.JDocsButton btnLogin;
    private com.harkon.jdocs.swing.JDocsButton btnShutdown;
    private javax.swing.JComboBox cbUserType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPasswordField tfPassword;
    private javax.swing.JTextField tfUserId;
    // End of variables declaration//GEN-END:variables
    Action goAction = new AbstractAction() {

        @Override
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();
            System.out.println("command " + command);
            if (com.harkon.jdocs.JDocsConstants.CLEAR.equals(command)) {
                if (tfUserId.hasFocus()) {
                    tfUserId.setText("");
                } else if (tfPassword.hasFocus()) {
                    tfPassword.setText("");
                }
            } else if (com.harkon.jdocs.JDocsConstants.LOGIN.equals(command)) {
                doLogin();
            } else if (com.harkon.jdocs.JDocsConstants.SHUTDOWN.equals(command)) {
                Application.getInstance().shutdownJDocs();
            } else if ("DBCONFIG".equalsIgnoreCase(command)) {
                DatabaseConfigurationDialog dialog = new DatabaseConfigurationDialog(Application.getJDocsWindow(), true);
                dialog.setTitle("Database connection error, please configure your database");
                dialog.setExitOnClose(true);
                dialog.pack();
                dialog.open();
            } else {
                if (tfUserId.hasFocus()) {
                    tfUserId.setText(tfUserId.getText() + command);
                } else if (tfPassword.hasFocus()) {

                    char[] password = tfPassword.getPassword();
                    String newPass = new String(password);
                    newPass += command;
                    tfPassword.setText(newPass);
                }
            }
        }
    };

    public void setUserTypes() {
        try {
            UserTypeDAO dao = new UserTypeDAO();
            List<UserType> userTypes = dao.findAll();
            //System.out.println(userTypes.toArray()[1]);
            cbUserType.setModel(new DefaultComboBoxModel(userTypes.toArray()));
        } catch (Exception e) {
            System.out.println("SetUserType Exception :" + e.toString());
        }
    }

    @Override
    public void setVisible(boolean aFlag) {
        super.setVisible(aFlag);
        if (aFlag) {
            tfUserId.requestFocus();
        }
    }

    public static PasswordScreen getInstance() {
        if (instance == null) {
            instance = new PasswordScreen();
        }
        return instance;
    }
}
